# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DfNBYS84kS0ocsxGuwwRGg1-F-xd7Its
"""

import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import pandas as pd
import matplotlib.pyplot as plt

data = {
    'Dose': [100, 200, 150, 300, 50, 250, 200, 150, 100, 300],
    'Age': [30, 45, 50, 60, 35, 70, 40, 55, 25, 65],
    'Sugar_Level': [90, 120, 110, 140, 100, 150, 130, 125, 95, 145],
    'Blood_Pressure': [120, 140, 130, 150, 110, 160, 135, 145, 115, 155],
    'Hypertension': [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    'Heart_Disease': [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    'Diabetes': [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
}

df = pd.DataFrame(data)

X = df[['Dose', 'Age', 'Sugar_Level', 'Blood_Pressure', 'Hypertension']]
y = df[['Heart_Disease', 'Diabetes']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"دقة النموذج: {accuracy * 100:.2f}%")

def simulate_effect():

    doses = [50, 100, 150, 200, 250, 300]
    ages = [25, 30, 40, 50, 60, 70]
    sugar_levels = [90, 100, 110, 120, 130, 140]
    blood_pressures = [110, 120, 130, 140, 150, 160]
    hypertension_status = [0, 1]

def simulate_effect():
    # قيم المدخلات التي سنحاكيها
    doses = [50, 100, 150, 200, 250, 300]  # الجرعات
    ages = [25, 30, 40, 50, 60, 70]  # الأعمار
    sugar_levels = [90, 100, 110, 120, 130, 140]  # مستويات السكر في الدم
    blood_pressures = [110, 120, 130, 140, 150, 160]  # مستويات ضغط الدم
    hypertension_status = [0, 1]  # حالة ضغط الدم المرتفع (0 = لا, 1 = نعم)

    # لتحليل التأثير على القلب و السكري بناءً على المدخلات المتغيرة
    results = []

    for dose in doses:
        for age in ages:
            for sugar_level in sugar_levels:
                for blood_pressure in blood_pressures:
                    for hypertension in hypertension_status:
                        # مدخلات المستخدم
                        user_input = np.array([[dose, age, sugar_level, blood_pressure, hypertension]])
                        prediction = model.predict(user_input)

                        # إضافة النتائج
                        heart_disease_risk = prediction[0][0]
                        diabetes_risk = prediction[0][1]
                        results.append([dose, age, sugar_level, blood_pressure, hypertension, heart_disease_risk, diabetes_risk])

    # تحويل النتائج إلى DataFrame
    simulation_results = pd.DataFrame(results, columns=['Dose', 'Age', 'Sugar_Level', 'Blood_Pressure', 'Hypertension', 'Heart_Disease', 'Diabetes'])
    print("\nنتائج المحاكاة:")
    print(simulation_results)

    plt.figure(figsize=(10, 6))
    plt.scatter(simulation_results['Age'], simulation_results['Dose'], c=simulation_results['Heart_Disease'], cmap='coolwarm', alpha=0.6)
    plt.title('تأثير الأسبرين على مرض القلب حسب العمر والجرعة')
    plt.xlabel('العمر')
    plt.ylabel('جرعة الأسبرين (بالملغ)')
    plt.colorbar(label='احتمال تأثير الأسبرين على مرض القلب')
    plt.show()
    plt.figure(figsize=(10, 6))
    plt.scatter(simulation_results['Sugar_Level'], simulation_results['Dose'], c=simulation_results['Diabetes'], cmap='coolwarm', alpha=0.6)
    plt.title('تأثير الأسبرين على مرض السكري حسب مستوى السكر في الدم والجرعة')
    plt.xlabel('مستوى السكر في الدم')
    plt.ylabel('جرعة الأسبرين (بالملغ)')
    plt.colorbar(label='احتمال تأثير الأسبرين على مرض السكري')
    plt.show()
simulate_effect()